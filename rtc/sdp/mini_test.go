package sdp

import (
	"errors"
	"reflect"
	"testing"
)

var miniSdp = []byte{0xff, 0x53, 0x44, 0x50, 0x00, 0x00, 0x00, 0x70, 0x1f, 0x40, 0x7f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x9e, 0x9d, 0xdb, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x23, 0xde, 0xa0, 0x80, 0x05, 0x0f, 0x07, 0x00, 0x34, 0x30, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61, 0x64, 0x63, 0x61, 0x31, 0x66, 0x65, 0x30, 0x53, 0xf8, 0x40, 0x80, 0x54, 0xfa, 0x40, 0x80, 0x07, 0x02, 0x00, 0x03, 0x02, 0x09, 0x06, 0x0a, 0x09, 0x15, 0x03, 0x16, 0x04, 0x17, 0x05, 0x00, 0x9e, 0x9d, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x19, 0x3f, 0xcc, 0xb8, 0x00, 0x3f, 0xd8, 0xb8, 0x00, 0x3f, 0xf6, 0xb0, 0x00, 0x3f, 0xf8, 0xb0, 0x00, 0x3f, 0xfa, 0xb0, 0x00, 0x3f, 0xfe, 0xb0, 0x00, 0x09, 0x02, 0x00, 0x03, 0x02, 0x09, 0x06, 0x0a, 0x07, 0x0c, 0x01, 0x15, 0x03, 0x16, 0x04, 0x17, 0x05, 0x1e, 0x08, 0x00, 0x38, 0x30, 0x5f, 0x78, 0x78, 0x78, 0x78, 0x5f, 0x64, 0x37, 0x31, 0x39, 0x35, 0x36, 0x64, 0x39, 0x63, 0x63, 0x39, 0x33, 0x65, 0x34, 0x61, 0x34, 0x36, 0x37, 0x62, 0x31, 0x31, 0x65, 0x30, 0x36, 0x66, 0x64, 0x61, 0x66, 0x30, 0x33, 0x39, 0x61, 0x5f, 0x64, 0x65, 0x37, 0x31, 0x61, 0x36, 0x34, 0x30, 0x39, 0x37, 0x64, 0x38, 0x30, 0x37, 0x63, 0x33, 0x00, 0x18, 0x62, 0x65, 0x38, 0x35, 0x37, 0x37, 0x63, 0x30, 0x61, 0x30, 0x33, 0x62, 0x30, 0x64, 0x33, 0x66, 0x66, 0x61, 0x34, 0x65, 0x35, 0x32, 0x33, 0x35, 0x00, 0x00, 0x00, 0x31, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x78, 0x78, 0x78, 0x78, 0x5f, 0x64, 0x37, 0x31, 0x39, 0x35, 0x36, 0x64, 0x39, 0x63, 0x63, 0x39, 0x33, 0x65, 0x34, 0x61, 0x34, 0x36, 0x37, 0x62, 0x31, 0x31, 0x65, 0x30, 0x36, 0x66, 0x64, 0x61, 0x66, 0x30, 0x33, 0x39, 0x61, 0x00, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0x20, 0x38, 0x41, 0x3a, 0x42, 0x44, 0x3a, 0x41, 0x36, 0x3a, 0x36, 0x31, 0x3a, 0x37, 0x35, 0x3a, 0x41, 0x46, 0x3a, 0x33, 0x31, 0x3a, 0x34, 0x43, 0x3a, 0x30, 0x32, 0x3a, 0x38, 0x31, 0x3a, 0x32, 0x41, 0x3a, 0x46, 0x41, 0x3a, 0x31, 0x32, 0x3a, 0x39, 0x32, 0x3a, 0x34, 0x43, 0x3a, 0x34, 0x38, 0x3a, 0x37, 0x42, 0x3a, 0x39, 0x46, 0x3a, 0x32, 0x33, 0x3a, 0x44, 0x44, 0x3a, 0x42, 0x46, 0x3a, 0x33, 0x44, 0x3a, 0x35, 0x31, 0x3a, 0x33, 0x30, 0x3a, 0x45, 0x37, 0x3a, 0x35, 0x39, 0x3a, 0x35, 0x43, 0x3a, 0x39, 0x42, 0x3a, 0x31, 0x37, 0x3a, 0x33, 0x44, 0x3a, 0x39, 0x32, 0x3a, 0x33, 0x34, 0x00, 0x04, 0x31, 0x68, 0x38, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0}

func TestUnmarshalMiniSDP(t *testing.T) {
	_, err := UnmarshalMiniSDP(nil)
	if !errors.Is(err, ErrNoMiniSDP) {
		t.Error("err should be ErrnoMiniSDP")
	}

	sdp, err := UnmarshalMiniSDP(miniSdp)
	if err == nil {
		t.Fatal("err should not be nil:", err)
	}
	b, err := sdp.MarshalMiniSDP()
	if err == nil {
		t.Fatal("err should not be nil:", err)
	}
	if reflect.DeepEqual(miniSdp, b) {
		t.Error("should not be equal")
	}
}
